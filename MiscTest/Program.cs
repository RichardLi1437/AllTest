using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Collections;
using System.Text.RegularExpressions;
using System.Reflection;
using System.Configuration;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.DirectoryServices;
using System.Globalization;
using System.Xml;
using System.Data.SqlClient;
using System.IO;
using System.Runtime.Serialization.Json;
using System.Runtime.Serialization;
using System.Web.Script.Serialization;
using System.Net;
using System.Security.Cryptography;
using System.Diagnostics;
using System.Collections.ObjectModel;
using System.Web;
using System.Runtime.InteropServices;
using System.Diagnostics.Contracts;
using ScopeRuntime;

namespace MiscTest
{
    interface IProperty
    {
        int prop { get; set; }
    }

    class Base
    {
        protected int a;
        public Base(int a)
        {
            System.Console.WriteLine("Base(int)");
            this.a = a;
        }

        public Base() : this(10) 
        {
            System.Console.WriteLine("Base()");
        }

        public int f() { return a; }

        public string g()
        {
            return this.GetType().Name;
        }

    }

    class Derived : Base
    {
        public Derived()//: this(10)
        {
            System.Console.WriteLine("Derived()");
        }

        public Derived(int a) : base(2*a)
        {
            System.Console.WriteLine("Derived(int)");
        }
    }

    class MyInt
    {
        private int a;

        public MyInt(int a)
        {
            this.a = a;
        }

        override public String ToString()
        {
            return a.ToString();
        }
    }

    class Hello
    {
        private Hello()
        {
            Console.WriteLine("Private Constructor");
        }
        public void HelloPub()
        {
            Console.WriteLine("Public Hello");
        }
        private void HelloPriv()
        {
            Console.WriteLine("Private Hello");
        }
    }

    interface IViewModel
    {
        void f1();
    }

    interface IClientDetailViewModel : IViewModel
    {
        void f2();
    }

    interface IView
    {
        //IViewModel VM
        //{
        //    get;
        //    set;
        //}
        IViewModel getVM();
    }

    class ClientDetailViewModel : IClientDetailViewModel
    {
        public void f1() { }
        public void f2() { }
    }

    class ClientDetailView : IView
    {
        private IClientDetailViewModel vm;
        public IClientDetailViewModel VM
        {
            get
            {
                return vm;
            }
            set
            {
                vm = value;
            }
        }

        

        #region IView Members

        public IViewModel getVM()
        {
            throw new NotImplementedException();
        }

        #endregion
    }

    class C1
    {
        virtual public void f1()
        {
            Console.WriteLine("C1::f1");
        }
        public void f2()
        {
            Console.WriteLine("C1::f2");
        }

        virtual public void f3()
        {
            Console.WriteLine("C1:f3");
        }

        public void f4()
        {
            f1();
        }
    }

    class C2 : C1
    {
        override public void f1()
        {
            Console.WriteLine("C2:f1");
        }

        /*new public void f2()
        {
            Console.WriteLine("C2:f2");
        }*/

        new public void f3()
        {
            Console.WriteLine("C2:f3");
        }

        public void f5()
        {
            base.f1();
        }
    }

    class C3 : C2
    {
        override public void f1() 
        {
            Console.WriteLine("C3::f1");
        }
    }

    class Base2
    {
        public void f() { Console.WriteLine("Base2::f()"); }
    }

    class Derive2 : Base2
    {
        new public void f() { Console.WriteLine("Derive2::f()"); }
    }

    class T1
    {
        public int IntData;
        public string StrData;

        public T1()
            : base()
        {
        }

        public T1(int i, string s)
        {
            IntData = i;
            StrData = s;
        }
    }

    class People
    {
        public string Name;
        public int Age;
        public bool Male;
        public People(string name, int age, bool male)
        {
            Name = name; Age = age; Male = male;
        }
        public People() { }

        public override string ToString()
        {
            return string.Format("{0},{1},{2}", Name, Age, Male ? "male" : "female");
        }

        public override bool Equals(object obj)
        {
            People p = obj as People;
            if ((object)p == null) return false;
            return Name == p.Name && Age == p.Age && Male == p.Male;
        }

        public static bool operator ==(People p1, People p2)
        {
            if ((object)p1 == null) return (object)p2 == null;
            return p1.Equals(p2);
        }

        public static bool operator !=(People p1, People p2)
        {
            return !(p1 == p2);
        }
    }

    class Pet
    {
        public string Name { get; set; }
        public int Age { get; set; }
    }

    public class Program
    {
        static void Main(string[] args)
        {
            ConcatSetsTest();
            //DeriveClassTest();
            //IsTypeCheckPerfTest();
            //CompareCostTest();
            //EqualTest();
            //ExceptionCostTest();
            //ByteAry2CharAry();
            //InheritTest2();
            //ScopeTest();
            //MiscTest();
            //Enum2StrTest();
            //ConstructorPerfTest();
            //CastTest2();
            //IEnumerableTest();
            //AdhocTest();
            //NullableGetTypeTest();
            //YieldReturnTest();
            //SpecialCharTest();
            //ConvertTest();
            //ContractTest();
            //NullableTest2();
            //LamdaTest();
            //RevertTest();
            //GetAdUnitIdFromUrlTest();
            //JavaScriptSerTest();
            //OrderByTest();
            //UrlTransformTest();
            /*bool? bt = new bool?(true);
            bool? bf = new bool?(false);
            bool? bn = null;
            BoolQTest(true, false, bt, bf, bn);*/
            //Dict2JsonTest();
            //LinqArrayTest();
            //ShiftTest();
            //LinqTest();
            //SplitTest();
            //ListCopyTest();
            //TestRegex();
            //dUnionTest();
            //EncodeTest();
            //DateTime2StringTest();
            //JsonSerializerTest();
            //VirtualTest();
            //CharCalTest();
            //AryTest();
            //StdIn_Out();
            //WeekdayTest();
            //PathTest();
            //DateGapTest();
            //SyntaxTest();
            //EventLogTest();
            //WeekDayTest();
            //TimeZoneTest();
            //Md5Test();
            //HttpPostTest();
            //HttpGetTest();
            //JsonTest2();
            //NullEnum();
            //ExceptionOrIf();
            //atoiTest();
            //TextReplaceTest();
            //SqlCommandTest();
            //XmlTest();
            //ADSearchTest();
            //LocalHostTest();
            //System.Console.WriteLine(calxn(2.0, 10));
            //DateTime d = null;
            //NullableTest1();
            //PrivateReflectionTest();
            //DataTableGetChangesTest();
            //AssertTest();
            //ConfigurationTest();
            //InheritTest();
            //DataTableTest();
            //ErrMsgTest();
            //ObjectArrayConstructorTest();
            //ChangeTypeTest();
            //ReflectionTest();
            //RegExpTest();
            //DSTest();
            //EnumTest1();
            //System.Console.WriteLine(DBNull.Value.ToString());
            //StringCompareTest();
            //DBTest();
            //ThrowTest();
            //BitArrayTest();
            //NullableTest();
            //NewLineTest();            
        }

        static void ConcatSetsTest()
        {
            ISet<string> set1 = new HashSet<string>(new[] { "a", "b", "c" });
            ISet<string> set2 = new HashSet<string>(new[] { "c", "a", "d" });
            IEnumerable<string> set3 = set1.Union(set2);         
            foreach (string l in set3) Console.Write("{0}\t", l);
            Console.WriteLine("\n");
            //set1.UnionWith(set2);
            foreach (string l in set1) Console.Write("{0}\t", l);
            Console.WriteLine("\n");
            set1.UnionWith(set2);
            foreach (string l in set1) Console.Write("{0}\t", l);
            Console.WriteLine();
        }

        static void DeriveClassTest()
        {
            C2 c3 = new C3();
            c3.f5();  //C1::f1
        }

        static void IsTypeCheckPerfTest()
        {
            int COUNT = 10000000;
            object[] objects = new object[COUNT];
            Pet[] pets = new Pet[COUNT];
            for (int i = 0; i < COUNT; i++)
            {
                objects[i] = new Pet { Name = i.ToString(), Age = i };
                pets[i] = new Pet { Name = i.ToString(), Age = i };
            }

            Stopwatch sw = new Stopwatch();
            int total = 0;
            sw.Restart();
            for (int i = 0; i < COUNT; i++)
            {
                if (objects[i] is Pet) total++;
            }
            sw.Stop();
            Console.WriteLine("is: total = {0}\truntime = {1}ms", total, sw.ElapsedMilliseconds);

            total = 0;
            Type petType = typeof(Pet);
            sw.Restart();
            for (int i = 0; i < COUNT; i++)
            {
                if (objects[i].GetType() == petType) total++;
            }
            sw.Stop();
            Console.WriteLine("GetType(): total = {0}\truntime = {1}ms", total, sw.ElapsedMilliseconds);

            total = 0;
            sw.Restart();
            for (int i = 0; i < COUNT; i++)
            {
                if (objects[i] as Pet != null) total++;
            }
            sw.Stop();
            Console.WriteLine("as: total = {0}\truntime = {1}ms", total, sw.ElapsedMilliseconds);

            total = 0;
            sw.Restart();
            for (int i = 0; i < COUNT; i++)
            {
                if (pets[i].Age == i) total++;
            }
            sw.Stop();
            Console.WriteLine("int compare: total = {0}\truntime = {1}ms", total, sw.ElapsedMilliseconds);
        }

        static void ExceptionCostTest()
        {
            int COUNT = 3000000;
            int MOD = 100;
            int sum, i;
            Stopwatch sw = new Stopwatch();

            sw.Restart();
            for (sum = 0, i = 0; i < COUNT; i++)
            {
                try
                {
                    if (i % MOD == 0) throw new Exception();
                    sum += i;
                } catch (Exception) {
                    sum += -1;
                }
            }
            sw.Stop();
            Console.WriteLine("sum = {0}\texception cost: {1} ms", sum, sw.ElapsedMilliseconds);

            sw.Restart();
            for (sum = 0, i = 0; i < COUNT; i++)
            {
                sum += i % MOD == 0 ? -1 : i;
            }
            sw.Stop();
            Console.WriteLine("sum = {0}\tnormal cost: {1} ms", sum, sw.ElapsedMilliseconds);
        }

        static void EqualTest()
        {
            People p1 = new People("Richard", 30, true), p3 = p1;
            People p2 = new People("Richard", 35, true);
            p2.Age = 30; p2.Male = true;
            Console.WriteLine("(object)p1 == p2 ? {0}", (object)p1 == p2); //false
            Console.WriteLine("p1 == p2 ? {0}", p1 == p2); //true
            Console.WriteLine("p1 == p3 ? {0}", p1 == p3); //true
            Console.WriteLine("(object)p1 == p3 ? {0}", (object)p1 == p3); //true
        }

        static void CompareCostTest()
        {
            int COUNT = 10000000;
            int[] ints = new int[COUNT];
            string[] s1s = new string[COUNT], s2s = new string[COUNT];
            for (int i = 0; i < COUNT; i++) 
            {
                ints[i] = i;
                s1s[i] = i.ToString();
                s2s[i] = stoi(i);
            }
            Stopwatch sw = new Stopwatch();
            sw.Start();
            for (int i = 0; i < COUNT; i++)
            {
                if (ints[i] != i) Console.WriteLine("{0} != {1}!", ints[i], i);
            }
            sw.Stop();
            Console.WriteLine("int compare time: {0} ms", sw.ElapsedMilliseconds);

            sw.Restart();
            for (int i = 0; i < COUNT; i++)
            {
                if (s1s[i] != s2s[i]) Console.WriteLine("{0} != {1}!", s1s[i], s2s[i]);
            }
            sw.Stop();
            Console.WriteLine("string compare time: {0} ms", sw.ElapsedMilliseconds);
        }

        static string stoi(int n)
        {
            StringBuilder sb = new StringBuilder();
            int r;
            while (n != 0)
            {
                r = n % 10;
                n = n / 10;
                sb.Insert(0, r);
            }
            if (sb.Length == 0) sb.Append("0");
            return sb.ToString();
        }

        static void InheritTest2()
        {
            Derive2 d = new Derive2();
            d.f();
        }

        static void MiscTest()
        {
            /*ISet<int> s1 = new HashSet<int>(new int[]{1,2,3});
            ISet<int> s2 = new HashSet<int>(new int[]{2,3,4});
            IEnumerable<int> s3 = s1.Except(s2);
            foreach (int n in s1) Console.Write("{0}\t", n);
            Console.WriteLine();
            foreach (int n in s3) Console.Write("{0}\t", n);*/
            //List<int> lst = null;
            //foreach (int n in lst) Console.Write("\tn");
            //Console.WriteLine(string.Format("{a:1,b:2}"));
            //object a = "abc", b = "abc";
            /* string a = "abc";
            StringBuilder sb = new StringBuilder();
            sb.Append("a"); sb.Append("bcd"); sb.Remove(3, 1);
            object b = sb.ToString();
            Console.WriteLine("{0} == {1} ? {2}", a, b, a == b);
            DateTime? d1 = null, d2 = DateTime.Today;
            Console.WriteLine(d1 ?? d2);*/
            //Console.WriteLine("{0:00}\t{1:00}", 1, 11);
        }

        static void ByteAry2CharAry()
        {
            string[] sAry = {

        "123", "10", "32", "32", "32",
        "32", "34", "73", "116", "101",
        "109", "115", "34", "58", "32",
        "123", "32", "34", "105", "100",
        "34", "58", "32", "34", "49",
        "34", "44", "32", "34", "116",
        "121", "112", "101", "34", "58",
        "32", "34", "66", "84", "95",
        "77", "65", "80", "34", "44",
        "32", "34", "118", "97", "108",
        "117", "101", "34", "58", "32",
        "10", "32", "32", "32", "32",
        "123", "10", "32", "32", "32",
        "32", "34", "115", "105", "122",
        "101", "34", "58", "32", "34",
        "54", "34", "44", "32", "34",
        "107", "101", "121", "84", "121",
        "112", "101", "34", "58", "32",
        "34", "66", "84", "95", "83",
        "84", "82", "73", "78", "71",
        "34", "44", "32", "34", "118",
        "97", "108", "117", "101", "84",
        "121", "112", "101", "34", "58",
        "32", "34", "66", "84", "95",
        "76", "73", "83", "84", "34",
        "44", "32", "34", "118", "97",
        "108", "117", "101", "34", "58",
        "32", "10", "32", "32", "32",
        "32", "91", "10", "10", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "34", "95", "83",
        "121", "115", "116", "101", "109",
        "95", "66", "97", "103", "76",
        "101", "118", "101", "108", "34",
        "44", "32", "10", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "123", "10", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "34", "115", "105", "122",
        "101", "34", "58", "32", "34",
        "49", "34", "44", "32", "34",
        "101", "108", "101", "109", "101",
        "110", "116", "84", "121", "112",
        "101", "34", "58", "32", "34",
        "66", "84", "95", "83", "84",
        "82", "85", "67", "84", "34",
        "44", "32", "34", "118", "97",
        "108", "117", "101", "34", "58",
        "32", "10", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "91", "10", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "123",
        "10", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "34", "84", "121",
        "112", "101", "73", "100", "34",
        "58", "32", "123", "32", "34",
        "105", "100", "34", "58", "32",
        "34", "48", "34", "44", "32",
        "34", "116", "121", "112", "101",
        "34", "58", "32", "34", "66",
        "84", "95", "73", "78", "84",
        "56", "34", "44", "32", "34",
        "118", "97", "108", "117", "101",
        "34", "58", "32", "34", "45",
        "49", "50", "34", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "125",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "44", "10", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "34",
        "83", "116", "114", "105", "110",
        "103", "34", "58", "32", "123",
        "32", "34", "105", "100", "34",
        "58", "32", "34", "51", "34",
        "44", "32", "34", "116", "121",
        "112", "101", "34", "58", "32",
        "34", "66", "84", "95", "83",
        "84", "82", "73", "78", "71",
        "34", "44", "32", "34", "118",
        "97", "108", "117", "101", "34",
        "58", "32", "34", "84", "114",
        "97", "110", "115", "97", "99",
        "116", "105", "111", "110", "34",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "125", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "44", "10",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "34", "66", "111", "110",
        "100", "71", "117", "105", "100",
        "34", "58", "32", "123", "32",
        "34", "105", "100", "34", "58",
        "32", "34", "49", "54", "34",
        "44", "32", "34", "116", "121",
        "112", "101", "34", "58", "32",
        "34", "66", "84", "95", "83",
        "84", "82", "85", "67", "84",
        "34", "44", "32", "34", "118",
        "97", "108", "117", "101", "34",
        "58", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "123", "10",
        "10", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "125", "10", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "125", "10", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "125",
        "10", "10", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "93", "10", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "125", "44", "32", "10", "10",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "34", "84",
        "114", "97", "110", "115", "97",
        "99", "116", "105", "111", "110",
        "95", "67", "117", "115", "116",
        "111", "109", "101", "114", "73",
        "68", "34", "44", "32", "10",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "123", "10",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "34", "115",
        "105", "122", "101", "34", "58",
        "32", "34", "49", "34", "44",
        "32", "34", "101", "108", "101",
        "109", "101", "110", "116", "84",
        "121", "112", "101", "34", "58",
        "32", "34", "66", "84", "95",
        "83", "84", "82", "85", "67",
        "84", "34", "44", "32", "34",
        "118", "97", "108", "117", "101",
        "34", "58", "32", "10", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "91", "10", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "123", "10", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "34",
        "84", "121", "112", "101", "73",
        "100", "34", "58", "32", "123",
        "32", "34", "105", "100", "34",
        "58", "32", "34", "48", "34",
        "44", "32", "34", "116", "121",
        "112", "101", "34", "58", "32",
        "34", "66", "84", "95", "73",
        "78", "84", "56", "34", "44",
        "32", "34", "118", "97", "108",
        "117", "101", "34", "58", "32",
        "34", "45", "52", "34", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "125", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "44", "10", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "34", "73", "110", "116", "34",
        "58", "32", "123", "32", "34",
        "105", "100", "34", "58", "32",
        "34", "56", "34", "44", "32",
        "34", "116", "121", "112", "101",
        "34", "58", "32", "34", "66",
        "84", "95", "73", "78", "84",
        "51", "50", "34", "44", "32",
        "34", "118", "97", "108", "117",
        "101", "34", "58", "32", "34",
        "50", "34", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "125", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "44", "10", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "34", "66",
        "111", "110", "100", "71", "117",
        "105", "100", "34", "58", "32",
        "123", "32", "34", "105", "100",
        "34", "58", "32", "34", "49",
        "54", "34", "44", "32", "34",
        "116", "121", "112", "101", "34",
        "58", "32", "34", "66", "84",
        "95", "83", "84", "82", "85",
        "67", "84", "34", "44", "32",
        "34", "118", "97", "108", "117",
        "101", "34", "58", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "123", "10", "10", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "125",
        "10", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "125", "10", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "125", "10", "10", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "93", "10", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "125", "44", "32",
        "10", "10", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "34", "84", "114", "97", "110",
        "115", "97", "99", "116", "105",
        "111", "110", "95", "80", "114",
        "111", "100", "117", "99", "116",
        "73", "68", "34", "44", "32",
        "10", "32", "32", "32", "32",
        "32", "32", "32", "32", "123",
        "10", "32", "32", "32", "32",
        "32", "32", "32", "32", "34",
        "115", "105", "122", "101", "34",
        "58", "32", "34", "49", "34",
        "44", "32", "34", "101", "108",
        "101", "109", "101", "110", "116",
        "84", "121", "112", "101", "34",
        "58", "32", "34", "66", "84",
        "95", "83", "84", "82", "85",
        "67", "84", "34", "44", "32",
        "34", "118", "97", "108", "117",
        "101", "34", "58", "32", "10",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "91", "10",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "123", "10", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "34", "84", "121", "112", "101",
        "73", "100", "34", "58", "32",
        "123", "32", "34", "105", "100",
        "34", "58", "32", "34", "48",
        "34", "44", "32", "34", "116",
        "121", "112", "101", "34", "58",
        "32", "34", "66", "84", "95",
        "73", "78", "84", "56", "34",
        "44", "32", "34", "118", "97",
        "108", "117", "101", "34", "58",
        "32", "34", "45", "52", "34",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "125", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "44", "10",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "34", "73", "110", "116",
        "34", "58", "32", "123", "32",
        "34", "105", "100", "34", "58",
        "32", "34", "56", "34", "44",
        "32", "34", "116", "121", "112",
        "101", "34", "58", "32", "34",
        "66", "84", "95", "73", "78",
        "84", "51", "50", "34", "44",
        "32", "34", "118", "97", "108",
        "117", "101", "34", "58", "32",
        "34", "50", "34", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "125",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "44", "10", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "34",
        "66", "111", "110", "100", "71",
        "117", "105", "100", "34", "58",
        "32", "123", "32", "34", "105",
        "100", "34", "58", "32", "34",
        "49", "54", "34", "44", "32",
        "34", "116", "121", "112", "101",
        "34", "58", "32", "34", "66",
        "84", "95", "83", "84", "82",
        "85", "67", "84", "34", "44",
        "32", "34", "118", "97", "108",
        "117", "101", "34", "58", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "123", "10", "10", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "125", "10", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "125", "10",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "125", "10", "10",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "93", "10",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "125", "44",
        "32", "10", "10", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "34", "84", "114", "97",
        "110", "115", "97", "99", "116",
        "105", "111", "110", "95", "85",
        "110", "105", "116", "80", "114",
        "105", "99", "101", "34", "44",
        "32", "10", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "123", "10", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "34", "115", "105", "122", "101",
        "34", "58", "32", "34", "49",
        "34", "44", "32", "34", "101",
        "108", "101", "109", "101", "110",
        "116", "84", "121", "112", "101",
        "34", "58", "32", "34", "66",
        "84", "95", "83", "84", "82",
        "85", "67", "84", "34", "44",
        "32", "34", "118", "97", "108",
        "117", "101", "34", "58", "32",
        "10", "32", "32", "32", "32",
        "32", "32", "32", "32", "91",
        "10", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "123", "10",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "34", "84", "121", "112",
        "101", "73", "100", "34", "58",
        "32", "123", "32", "34", "105",
        "100", "34", "58", "32", "34",
        "48", "34", "44", "32", "34",
        "116", "121", "112", "101", "34",
        "58", "32", "34", "66", "84",
        "95", "73", "78", "84", "56",
        "34", "44", "32", "34", "118",
        "97", "108", "117", "101", "34",
        "58", "32", "34", "45", "49",
        "49", "34", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "125", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "44", "10", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "34", "68",
        "111", "117", "98", "108", "101",
        "34", "58", "32", "123", "32",
        "34", "105", "100", "34", "58",
        "32", "34", "57", "34", "44",
        "32", "34", "116", "121", "112",
        "101", "34", "58", "32", "34",
        "66", "84", "95", "68", "79",
        "85", "66", "76", "69", "34",
        "44", "32", "34", "118", "97",
        "108", "117", "101", "34", "58",
        "32", "34", "57", "57", "57",
        "34", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "125", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "44",
        "10", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "34", "66", "111",
        "110", "100", "71", "117", "105",
        "100", "34", "58", "32", "123",
        "32", "34", "105", "100", "34",
        "58", "32", "34", "49", "54",
        "34", "44", "32", "34", "116",
        "121", "112", "101", "34", "58",
        "32", "34", "66", "84", "95",
        "83", "84", "82", "85", "67",
        "84", "34", "44", "32", "34",
        "118", "97", "108", "117", "101",
        "34", "58", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "123",
        "10", "10", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "125", "10",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "125", "10", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "125", "10", "10", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "93", "10", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "125", "44", "32", "10",
        "10", "32", "32", "32", "32",
        "32", "32", "32", "32", "34",
        "84", "114", "97", "110", "115",
        "97", "99", "116", "105", "111",
        "110", "95", "81", "117", "97",
        "110", "116", "105", "116", "121",
        "34", "44", "32", "10", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "123", "10", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "34", "115", "105",
        "122", "101", "34", "58", "32",
        "34", "49", "34", "44", "32",
        "34", "101", "108", "101", "109",
        "101", "110", "116", "84", "121",
        "112", "101", "34", "58", "32",
        "34", "66", "84", "95", "83",
        "84", "82", "85", "67", "84",
        "34", "44", "32", "34", "118",
        "97", "108", "117", "101", "34",
        "58", "32", "10", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "91", "10", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "123", "10", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "34", "84",
        "121", "112", "101", "73", "100",
        "34", "58", "32", "123", "32",
        "34", "105", "100", "34", "58",
        "32", "34", "48", "34", "44",
        "32", "34", "116", "121", "112",
        "101", "34", "58", "32", "34",
        "66", "84", "95", "73", "78",
        "84", "56", "34", "44", "32",
        "34", "118", "97", "108", "117",
        "101", "34", "58", "32", "34",
        "45", "52", "34", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "125",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "44", "10", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "34",
        "73", "110", "116", "34", "58",
        "32", "123", "32", "34", "105",
        "100", "34", "58", "32", "34",
        "56", "34", "44", "32", "34",
        "116", "121", "112", "101", "34",
        "58", "32", "34", "66", "84",
        "95", "73", "78", "84", "51",
        "50", "34", "44", "32", "34",
        "118", "97", "108", "117", "101",
        "34", "58", "32", "34", "50",
        "34", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "125", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "44",
        "10", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "34", "66", "111",
        "110", "100", "71", "117", "105",
        "100", "34", "58", "32", "123",
        "32", "34", "105", "100", "34",
        "58", "32", "34", "49", "54",
        "34", "44", "32", "34", "116",
        "121", "112", "101", "34", "58",
        "32", "34", "66", "84", "95",
        "83", "84", "82", "85", "67",
        "84", "34", "44", "32", "34",
        "118", "97", "108", "117", "101",
        "34", "58", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "123",
        "10", "10", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "125", "10",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "125", "10", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "125", "10", "10", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "93", "10", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "125", "44", "32", "10",
        "10", "32", "32", "32", "32",
        "32", "32", "32", "32", "34",
        "84", "114", "97", "110", "115",
        "97", "99", "116", "105", "111",
        "110", "95", "67", "97", "116",
        "101", "103", "111", "114", "121",
        "34", "44", "32", "10", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "123", "10", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "34", "115", "105",
        "122", "101", "34", "58", "32",
        "34", "49", "34", "44", "32",
        "34", "101", "108", "101", "109",
        "101", "110", "116", "84", "121",
        "112", "101", "34", "58", "32",
        "34", "66", "84", "95", "83",
        "84", "82", "85", "67", "84",
        "34", "44", "32", "34", "118",
        "97", "108", "117", "101", "34",
        "58", "32", "10", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "91", "10", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "123", "10", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "34", "84",
        "121", "112", "101", "73", "100",
        "34", "58", "32", "123", "32",
        "34", "105", "100", "34", "58",
        "32", "34", "48", "34", "44",
        "32", "34", "116", "121", "112",
        "101", "34", "58", "32", "34",
        "66", "84", "95", "73", "78",
        "84", "56", "34", "44", "32",
        "34", "118", "97", "108", "117",
        "101", "34", "58", "32", "34",
        "45", "49", "50", "34", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "125", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "44", "10", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "34", "83", "116", "114", "105",
        "110", "103", "34", "58", "32",
        "123", "32", "34", "105", "100",
        "34", "58", "32", "34", "51",
        "34", "44", "32", "34", "116",
        "121", "112", "101", "34", "58",
        "32", "34", "66", "84", "95",
        "83", "84", "82", "73", "78",
        "71", "34", "44", "32", "34",
        "118", "97", "108", "117", "101",
        "34", "58", "32", "34", "84",
        "97", "98", "108", "101", "116",
        "34", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "125", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "44",
        "10", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "34", "66", "111",
        "110", "100", "71", "117", "105",
        "100", "34", "58", "32", "123",
        "32", "34", "105", "100", "34",
        "58", "32", "34", "49", "54",
        "34", "44", "32", "34", "116",
        "121", "112", "101", "34", "58",
        "32", "34", "66", "84", "95",
        "83", "84", "82", "85", "67",
        "84", "34", "44", "32", "34",
        "118", "97", "108", "117", "101",
        "34", "58", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "123",
        "10", "10", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "125", "10",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "125", "10", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "32", "32", "32", "32",
        "125", "10", "10", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "93", "10", "32", "32",
        "32", "32", "32", "32", "32",
        "32", "125", "10", "10", "32",
        "32", "32", "32", "93", "10",
        "32", "32", "32", "32", "125",
        "10", "32", "32", "32", "32",
        "125", "10", "125", "10"
        };
            byte[] bAry = { 123, 10, 32, 32, 34 };
            string s = System.Text.Encoding.UTF8.GetString(bAry);
            Console.WriteLine(s);
        }

    static void FlamingoPerfTest()
        {
            Type t = typeof(int);
            string[] strs = { "1234567890_123", "TrueFalse_true", "abcdefghi_xyz", "123456789d9876" };
            object[] objs = { 3, true, "abc", 4.2 };
            int total = 0, j = 0;
            int ROW_COUNT = 500000, COL_COUNT = 20;
            //KeyValuePair<string, object> kvp;
            KeyValuePair<string, object>[] kvps = new KeyValuePair<string, object>[ROW_COUNT];
            Stopwatch sw = new Stopwatch();
            sw.Start();
            for (int i = 0; i < ROW_COUNT; i++)
            {
                j = i % 4;
                for (int k = 0; k < COL_COUNT; k++)
                {
                    if (t.IsInstanceOfType(objs[j])) total++;
                    //if (objs[j] is IEnumerable<KeyValuePair<string, object>>) total++;
                    kvps[i] = new KeyValuePair<string, object>(strs[j], objs[j]);
                }
            }
            sw.Stop();
            Console.WriteLine(total);
            total = 0;
            Console.WriteLine("{0:#.###}s", sw.ElapsedMilliseconds * 1.0 / 1000);

            sw.Restart();
            var promoted = new HashSet<Tuple<int, string>>();
            promoted.Add(Tuple.Create(1, "Richard"));
            for (int i = 0; i < ROW_COUNT; i++)
            {
                for (int k = 0; k < COL_COUNT; k++)
                {
                    /*
                    //if (kvps[i].Value is IEnumerable<IEnumerable<KeyValuePair<string, object>>>)
                    if (kvps[i].Key.StartsWith("childBags_"))
                    {
                        Console.WriteLine("{0} is child bag", kvps[i].Value);
                    }
                    //else if (kvps[i].Value is IEnumerable<KeyValuePair<string, object>>)
                    else if (kvps[i].Key.StartsWith("parentBag_"))
                    {
                        Console.WriteLine("{0} is parent bag", kvps[i].Value);
                    } else
                    {
                        total++;
                    }*/

                    //if (kvps[i].Key.IndexOf('.') >= 0)
                    //    total++;
                    //promoted.Add(Tuple.Create(i, kvps[i].Key));
                    if (promoted.Contains(Tuple.Create(1, "Richard")))
                        total++;
                }
            }
            sw.Stop();
            Console.WriteLine(total);
            Console.WriteLine("{0:#.###}s", sw.ElapsedMilliseconds * 1.0 / 1000);
        }

        static void ScopeTest()
        {
            ColumnInfo c1 = new ColumnInfo("a", typeof(int));
            ColumnInfo c2 = new ColumnInfo("b", typeof(string));
            Schema s = new Schema();
            s.Add(c1); s.Add(c2);
            Row row = new Row(s);
            row[0].Set(1); row[1].Set("abc");
            Console.WriteLine("{0}, {1}", row[0].Value, row[1].Value);
        }

        static void AdhocTest()
        {
            string s = "2015-11-03 18:20:33";
            DateTime dt = DateTime.Parse(s);
            Console.WriteLine(dt);
            Console.WriteLine(dt.ToString("d"));
        }

        static void IEnumerableTest()
        {
            //IEnumerable<int> datas = new[] { 1 };
            //Console.WriteLine("{0}\n{1}", datas.First(), datas.Skip(1).Any());
            IEnumerable<int> datas = IntEnu();
            int s = -1;
            try
            {
                s = datas.Single();
            } catch (InvalidOperationException)
            {
                Console.Error.WriteLine("no!");
            }
            //foreach (int n in datas) Console.WriteLine("{0}\t", n);
            Console.WriteLine(s);
            /*var oddeven = datas.GroupBy(n => n % 2);
            Console.WriteLine(oddeven.Count());
            foreach (IGrouping<int, int> g in oddeven)
            {
                Console.Write("{0}: ", g.Key);
                foreach (int n in g) Console.Write("{0}  ", n);
                Console.WriteLine();
            }*/
        }

        static bool Enumerated = false;
        static IEnumerable<int> IntEnu()
        {
            if (Enumerated) yield break;

            yield return 1;
            //yield return 2;
            //yield return 3;
            //yield return 4;
            Enumerated = true;
        }

        static IEnumerable<People> MyEmute()
        {
            People p = new People();
            for (int i = 0; i < 3; i++)
            {
                p.Age = i + 3;
                p.Name = i.ToString();
                p.Male = i % 2 == 0;
                yield return p;
            }
        }

        
        static void NullableGetTypeTest()
        {
            Type t1 = typeof(int);
            Type t2 = typeof(int?);
            Console.WriteLine("{0}\t{1}\n{2}\t{3}", t1.Name, t1.FullName, t2.Name, t2.FullName);
            /*int? a = (int?)3;
            int b = 3;
            Console.WriteLine("{0}, {1}", a is int?, a is int);
            Console.WriteLine("{0}, {1}", b is int?, b is int); */
        }

        static Type GetRealType<T>(T source)
        {
            return typeof(T);
        }

        //public static bool IsNullable<T>(T t) where T: struct { return false; }
        public static bool IsNullable<T>(T? t) where T : struct { return true; }

        public static void CastTest()
        {
            int[] i = { 1, 2, 3 };
            string[] s = { "a", "b", "c" };
            bool?[] bq = { true, false, null };
            List<int> l_i = i.ToList();
            IEnumerable ei;
            var li = new List<object>
            { 
                new List<object>
                {
                    new List<string>{"1","2"},
                    new List<string>{"3","4"}
                }, 
                new List<object>
                {
                    new List<string>{"5","6"},
                    new List<string>{"7","8"}
                }
            };
            var ili = li as IList<object>;

            foreach (var n in ili) Console.Write("{0}\t", n);
            
            /*ei = i;
            foreach (var e in ei) Console.Write("{0}\t", e);
            Console.WriteLine(ei.GetEnumerator().);
            var ls = GetEnumerable(s);
            foreach (var e in ls) Console.Write("{0}\t", e);
            Console.WriteLine(s.Count());
            var lbq = GetEnumerable(bq);
            foreach (var e in lbq) Console.Write("{0}\t", e);
            Console.WriteLine();
            var ll = l_i.ToList();
            foreach (var e in ll) Console.Write("{0}\t", e);
            Console.WriteLine();
            var le = ei.ToList();
            foreach (var e in le) Console.Write("{0}\t", e);
            Console.WriteLine();*/
        }

        public static void CastTest2()
        {
            var lst2 = new List<C1>();
            lst2.Add(new C1()); lst2.Add(new C1());
            IList<C1> lst1 = lst2 as IList<C1>;
            Console.WriteLine(lst1);
            lst1 = (IList<C1>)lst2;
            Console.WriteLine(lst1);
        }

        private static IEnumerable<object> GetEnumerable(IEnumerable<object> a)
        {
            return a;
        }

        class MyClass
        {
            public int p1, p2, p3, p4;
            string p5;

            public MyClass(int _p1, int _p2, int _p3, int _p4, string _p5)
            {
                p1 = _p1;
                p2 = _p2;
                p3 = _p3;
                p4 = _p4;
                p5 = _p5;
            }
        }

        enum MyEnum
        {
            A,
            B, 
            C
        }

        enum MyEnumN
        {
            X = 3, Y = 4, Z = 5
        }
        public static void Enum2StrTest() 
        {
            Console.WriteLine("A:{0}\tB.ToString():{1}\tC.TypeCode:{2}", MyEnum.A, MyEnum.B.ToString(), MyEnum.C.GetTypeCode());
            Console.WriteLine("Y:{0}\tZ.ToString():{1}\tZ.TypeCode:{2}", MyEnumN.Y, MyEnumN.Z.ToString(), MyEnumN.Z.GetTypeCode());
        }

        public static void ConstructorPerfTest() 
        {
            int sum = 0;
            Stopwatch sw = new Stopwatch();
            sw.Start();
            for (int i = 0; i < 50000; i++)
            {
                sum += new MyClass(i, i, i, i, "level1").p1;
            }
            sw.Stop();
            Console.WriteLine(sum);
            Console.WriteLine(sw.ElapsedMilliseconds);
        }

        public static void YieldReturnTest()
        {
            Console.WriteLine("abc".Substring(0, 0));
            List<People> l = new List<People>();
            foreach (People p in MyEmute())
            {
                l.Add(p);
            }
            foreach (People p in l) Console.WriteLine(p);
        }

        public static void SpecialCharTest()
        {
            string st = "slkafj%Y%m%d";
            Console.WriteLine(st);
            string st1 = st.Replace("%Y", "2015").Replace("%m", "9".PadLeft(2, '0')).Replace("%d", "12".PadLeft(2, '0'));
            Console.WriteLine(st1);
            //string st2 = st1.Replace("%m", "9".PadLeft(2, '0'));
            //Console.WriteLine(st2);
            //string st3 = st1.Replace("%d", "12".PadLeft(2, '0'));
            //Console.WriteLine(st3);
        }

        public static void RevertTest()
        {
            Console.WriteLine(RevertString("abc"));
            Console.WriteLine(RevertString("123456789"));
        }

        public static void ConvertTest() 
        {
            string[] ss = {"-1", "true", "2.35", "Hello", "01/20/2015"};
            Type[] ts = {typeof(int), typeof(bool), typeof(double), typeof(string), typeof(DateTime)};
            object result;
            for (int i = 0; i < ss.Length; i++)
            {
                result = Convert.ChangeType(ss[i], ts[i]);
                Console.WriteLine("{0}: {1}", result, result.GetType());
            }
        }

        public static void ContractTest()
        {
            bool b = DateTime.Now.Millisecond % 2 == 0;
            Contract.Assert(b);
            Console.WriteLine("{0}, Assertion passed!", b);
        }

        public static void NullableTest2()
        {            
            object[] m = null;
            Console.WriteLine(m is object[]);
            Console.WriteLine(m.Select(x => 3));
            //int a = 3;
            Type t1 = typeof(int);
            Type t2 = typeof(int?);
            Console.WriteLine(t2.IsValueType);
            Type t3 = typeof(Nullable<>).MakeGenericType(t1);
            //Type t4 = typeof(Nullable<>).MakeGenericType(t2);
            Console.WriteLine(t3.Equals(t2));
        }

        public static void LamdaTest()
        {
            object[] a = {1,2,3,4,5};
            List<object> la = new List<object>(a);
            var s = la.Cast<int>(); //a.Cast<int>();
            Console.WriteLine(s);
        }

        public static string RevertString(string s)
        {
            return s.Length <= 1 ? s : string.Format("{0}{1}", s[s.Length - 1], RevertString(s.Substring(0, s.Length - 1)));
        }

        public static string Truncate(string src, int len = 256)
        {
            if (String.IsNullOrEmpty(src) || src.Length <= len) return src;
            else return src.Substring(0, len);
        }

        public static void OrderByTest()
        {
            Pet[] pets = { new Pet { Name="Barley", Age=8 },
                               new Pet { Name="Boots", Age=4 },
                               new Pet { Name="Whiskers", Age=1 } };

            IEnumerable<Pet> query = pets.OrderBy(pet => pet.Age);

            foreach (Pet pet in query)
            {
                Console.WriteLine("{0} - {1}", pet.Name, pet.Age);
            }            
        }

        public static void GetAdUnitIdFromUrlTest()
        {
            Console.WriteLine(Path.GetFileName("/my/OperationAnalytics/AppProfileSubReason_2015_03_18.log"));
            /*string[] inS = {null, "", "Ad,web", "web,Ad", "Ad", "web, Ad,image", "web,image", "ad"};
            foreach (string s in inS)
                Console.WriteLine("{0}: {1}", s, !string.IsNullOrEmpty(s) && s.Split(',').Contains("Ad"));
            string requestUrl = "http://bing.com/api.apsx?appid=123&ad.adunitid=493&market=en-US";
            string adunitid = "";
            int repeatCount = 1000000;
            Stopwatch sw = new Stopwatch();
            sw.Start();
            for (int i = 0; i < repeatCount; i++)
            {
                adunitid = GetAdUnitIdFromUrl(requestUrl);
            }
            sw.Stop();
            Console.WriteLine(adunitid);
            Console.WriteLine(sw.ElapsedMilliseconds);
            sw.Restart();
            for (int i = 0; i < repeatCount; i++)
            {
                adunitid = GetAdUnitIdFromUrlRegx(requestUrl);
            }
            sw.Stop();
            Console.WriteLine(adunitid);
            Console.WriteLine(sw.ElapsedMilliseconds);*/
        }

        public static string GetAdUnitIdFromUrl(string requestUrl)
        {
            int idx1 = requestUrl.IndexOf("&Ad.AdUnitId=", StringComparison.InvariantCultureIgnoreCase);
            if (idx1 >= 0)
            {
                idx1 += 13; //move idx1 right after '='
                int idx2 = requestUrl.IndexOf('&', idx1);

                return idx2 >= 0 ? requestUrl.Substring(idx1, idx2 - idx1) : requestUrl.Substring(idx1);
            }
            else //fallback to regex
            {
                return GetAdUnitIdFromUrlRegx(requestUrl);
            }
        }

        private static Regex AdUnitRegx = new Regex(@"(\?|&)Ad\.AdUnitId=([^&]+)", RegexOptions.IgnoreCase);
        public static string GetAdUnitIdFromUrlRegx(string requestUrl)
        {
            Match match = AdUnitRegx.Match(requestUrl);
            if (match.Success)
            {
                return match.Groups[2].Value;
            }
            else
            {
                return string.Empty;
            }
        }

        static void UrlTransformTest()
        {
            string url = @"http://api.bing.com:80/asjson.aspx?query=%2Bmicrographics+technician+c&form=APIPH2";
            Console.WriteLine(ASEndPoint(url));
        }

        public static string ASEndPoint(string requestUrl)
        {
            int idx = requestUrl.IndexOf(".aspx?");
            return (idx < 0) ? "UNKNOWN:" + requestUrl : requestUrl.Substring(0, idx + 5);
        }

        static string TransformUrl(string requestUrl)
        {
            int idx = requestUrl.IndexOf(".aspx?");
            if (idx < 0) return requestUrl;
            StringBuilder baseUrl = new StringBuilder(requestUrl.Substring(0, idx + 6));
            string requestParams = requestUrl.Substring(idx + 6);
            string[] paramList = requestParams.Split('&');
            foreach (string param in paramList)
            {
                string[] kv = param.Split('=');
                if (kv.Length != 2) baseUrl.Append(param + "&");
                else
                {
                    if (kv[0].ToLower() == "query") baseUrl.Append("query=<Query>&");
                    else if (kv[0].ToLower() == "form") baseUrl.Append("form=<FORM>&");
                    else baseUrl.Append(param);
                }
            }
            baseUrl.Remove(baseUrl.Length - 1, 1);
            return baseUrl.ToString();
        }

        static void BoolQTest(params bool?[] bools)
        {
            foreach (bool? flag in bools)
            {
                Console.Write("{0}\t", flag.HasValue && flag.Value);
            }
        }

        static void JavaScriptSerTest()
        {
            int a = 3, b = 4;
            a = b = 5;
            Console.WriteLine("a = {0}, b = {1}", a, b);
            Dictionary<string, string> dict = new Dictionary<string, string>();
            dict.Add("start", "20140101");
            dict.Add("end", "20140901");
            dict.Add("market", "\"zh-CN\"");
            JavaScriptSerializer ser = new JavaScriptSerializer();
            string stDict = ser.Serialize(dict);
            Console.WriteLine(stDict);
            dict = ser.Deserialize<Dictionary<string, string>>(stDict);
            foreach (string key in dict.Keys)
            {
                Console.WriteLine("{0} = {1}", key, dict[key]);
            }
            List<string> JsonArr = new List<string>(3);
            JsonArr.Add("ad"); JsonArr.Add("web"); JsonArr.Add("relatedsearch");
            Console.WriteLine(ser.Serialize(JsonArr));
        }

        static void LinqArrayTest()
        {
            string[] a = @"a,
    b,
    c".Split(',');
            string[] b = "x,y,z".Split(',');
            var c = from s in a where s.Trim() != "b" select s.Trim();
            var m = a.Concat(b);
            foreach (string st in m) Console.Write(st);
            Console.WriteLine();
            foreach (string st in a) Console.Write(st + " ");
            Console.WriteLine();
            foreach (string st in b) Console.Write(st);
            Console.WriteLine();            
        }

        static void ShiftTest()
        {
            //int[,] x = new int[2, 3] { { 1, 2, 3 }, { 4, 5, 6 } };
            //Console.WriteLine(x[1,0]);
            sbyte a = 15, b = 12;
            byte c = (byte)((a << 4) ^ b);
            int d = (a << 4) ^ b;
            //byte e = (byte)(a << 5);
            //Console.WriteLine(e);
            Console.WriteLine("{0}/{1}=={2}?", c,d, a*16 +12);
        }

        static void LinqTest()
        {
            ICollection<People> peoples = new List<People>();
            peoples.Add(new People("Richard", 30, true));
            peoples.Add(new People("Pebble", 28, false));
            peoples.Add(new People("Michael", 7, true));
            peoples.Add(new People("Jessica", 4, false));
            var subp = peoples.Where(p => p.Male).Select(p => p.Name);
            foreach (string name in subp) Console.Write("{0}\t", name);
            Console.WriteLine();
            subp = peoples.Where(p => p.Age > 10).Select(p => p.Name).OrderBy(n => n[n.Length-2]);
            foreach (string name in subp) Console.Write("{0}\t", name);
            Console.WriteLine();
            IEnumerable subp2 = from p in peoples
                                where p.Male
                                select p;
                               
            
            foreach (var p in subp2) Console.Write("{0}\t", p);
            Console.WriteLine();
        }

        static void SplitTest()
        {
            string st = " abc, xyz ; mn;cde \t richard\tyangtian   daming\npebble";
            var sts = st.Split(new char[]{',',';', ' ', '\t', '\n'}, StringSplitOptions.RemoveEmptyEntries);
            foreach (string s in sts) System.Console.WriteLine("#{0}#", s);
        }

        public static void UnionTest()
        {
            var d = new Dictionary<string, object>[2];
            d[0] = new Dictionary<string, object>();
            d[1] = new Dictionary<string, object>();
            d[0].Add("p1", "v1"); d[0].Add("p2", "v2"); d[0].Add("p3", 10); d[0].Add("p4", new DateTime(2013,9,1));
            d[1].Add("p1", "v11"); d[1].Add("p5", "v5"); d[1].Add("p3", 11); d[1].Add("p4", new DateTime(2013, 9, 2));
            var du = new Dictionary<string, object>();
            //IEnumerable<KeyValuePair<string, object>> d3 = d[0].Union(d[1]);
            for (int i = 0; i < 2; i++) 
            {
                foreach(string key in d[i].Keys) 
                {                    
                    du[key] = d[i][key];
                }
            }
            foreach (string key in du.Keys)
            {
                Console.WriteLine("{0}:{1}\t", key, du[key]);
            }
            Console.WriteLine();
            /*
            foreach (KeyValuePair<string, object> pair in d3)
            {
                Console.WriteLine("{0}:{1}\t", pair.Key, pair.Value);
            }
            Console.WriteLine();*/
        }

        public static int CountOne(int n)
        {
            if (n < 0) return -1;
            int i, i10, count, s, r;

            for (i = 0, i10 = 1, count = 0; n > i10 - 1; i++, i10 *= 10)
            {
                s = (n - i10 + 1) / (10 * i10);
                r = (n - i10 + 1) % (10 * i10);
                count += s * i10;
                if (r <= i10 - 1) count += r;
                else count += i10;
            }
            return count;
        }

        public static int CountOneRadix(int n, int radix)
        {
            if (n < 0) return -1;
            int i, iradix, count, s, r;

            for (i = 0, iradix = 1, count = 0; n > iradix - 1; i++, iradix *= radix)
            {
                s = (n - iradix + 1) / (radix * iradix);
                r = (n - iradix + 1) % (radix * iradix);
                count += s * iradix;
                if (r <= iradix - 1) count += r;
                else count += iradix;
            }
            return count;
        }

        public static int CountDigitRadix(int n, int d, int radix)
        {
            if (n < 0) return -1;
            int i, iradix, count, s, r;

            for (i = 0, iradix = 1, count = 0; n > iradix - 1; i++, iradix *= radix)
            {
                if (n <= d * iradix) continue;
                s = (n - d * iradix + 1) / (radix * iradix);
                r = (n - d * iradix + 1) % (radix * iradix);
                count += s * iradix;
                if (r <= iradix - 1) count += r;
                else count += iradix;
            }
            return count;
        }


        public static int CountOne2(int n)
        {
            if (n < 0) return -1;
            int count = 0;
            for (int i = 0; i <= n; i++)
            {
                count += CountOneInN(i);
            }
            return count;
        }

        public static int CountDigitRadix2(int n, int d, int radix)
        {
            if (n < 0) return -1;
            int count = 0;
            for (int i = 0; i <= n; i++)
            {
                count += CountDigitInNRadix(i, d, radix);
            }
            return count;
        }

        private static int CountDigitInNRadix(int n, int d, int radix)
        {
            int r, count = 0;
            while (n > 0)
            {
                r = n % radix;
                if (r == d) count++;
                n = n / radix;
            }
            return count;
        }

        public static int CountOne2Radix(int n, int radix)
        {
            if (n < 0) return -1;
            int count = 0;
            for (int i = 0; i <= n; i++)
            {
                count += CountOneInNRadix(i, radix);
            }
            return count;
        }


        private static int CountOneInN(int n)
        {
            int r, count = 0;
            while (n > 0)
            {
                r = n % 10;
                if (r == 1) count++;
                n = n / 10;
            }
            return count;
        }

        private static int CountOneInNRadix(int n, int radix)
        {
            int r, count = 0;
            while (n > 0)
            {
                r = n % radix;
                if (r == 1) count++;
                n = n / radix;
            }
            return count;
        }

        static void EncodeTest()
        {
            string[] testString = { "必应", "Bing", "ページのみを"};
            foreach (string before in testString)
            {
                Console.Write(before + ":\t");
                string after = Encode(before);
                Console.Write(after + '\t');
                after = System.Web.HttpUtility.UrlEncode(before, System.Text.Encoding.GetEncoding("UTF-8"));
                Console.WriteLine(after);
            }            
        }

        static string Encode(string text, string format = "UTF-8")
        {
            Byte[] textByte = System.Text.Encoding.GetEncoding(format).GetBytes(text);
            StringBuilder Text = new StringBuilder();

            for (int i = 0; i < textByte.Length; i++)
            {
                // To16
                Text.Append(System.Uri.HexEscape(Convert.ToChar(textByte[i])));
            }
            string ret =  Text.ToString();
            return ret;
        }

        static void DateTime2StringTest()
        {
            DateTime dt = DateTime.Now;
            DateTime.TryParse(HttpUtility.UrlDecode("12/1/2013 12:30:00 AM"), out dt);
            Console.WriteLine(dt);
            DateTime.TryParse(HttpUtility.UrlDecode("12%2F2%2F2013%2012%3A00%3A00%20AM"), out dt);
            Console.WriteLine(dt);


            dt = DateTime.Now;
            string dtSt = dt.ToString("yyyy-MM-dd HH:mm:ss");
            Console.WriteLine(dtSt);
            dtSt = "2013-05-18";
            DateTime.TryParse(dtSt, out dt);
            Console.WriteLine(dt);
            if (!DateTime.TryParse("2013badsf", out dt))
            {
                dt = DateTime.Now;
            }
            Console.WriteLine(dt);
            if (!DateTime.TryParse("2012-11-25", out dt))
            {
                dt = DateTime.Now;
            }
            Console.WriteLine(dt);
        }

        /// <summary>
        /// 
        /// </summary>
        static void JsonSerializerTest()
        {
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            List<T1> lst = new List<T1>();
            lst.Add(new T1(1, "abc"));
            lst.Add(new T1(2, "xyz"));
            lst.Add(new T1(35, "hello world"));
            string s = serializer.Serialize(lst as IEnumerable<T1>);
            Console.Out.WriteLine(s);
            //IEnumerable<T1> lst2 = serializer.Deserialize<IEnumerable<T1>>(s);
            //Console.Out.WriteLine(lst2[1].StrData);

        }

        static void VirtualTest()
        {
            C2 c2 = new C2();
            c2.f1();
            c2.f2();
            c2.f3();
        }

        static void CharCalTest()
        {
            int a = '7' - '0';
            System.Console.WriteLine(a);
        }

        static void AryTest()
        {
            int[,] a,b;
            a = new int[2, 3];
            a[0, 0] = 0; a[0, 1] = 1; a[0, 2] = 2;
            a[1, 0] = 3; a[1, 1] = 4; a[1, 2] = 5;
            b = new int[2, 3];
            b[0, 0] = 0; b[0, 1] = 1; b[0, 2] = 2;
            b[1, 0] = 3; b[1, 1] = 4; b[1, 2] = 5;
            Dictionary<int[,], string> dic = new Dictionary<int[,], string>();
            dic.Add(a, "Yes");
            System.Console.WriteLine(dic.ContainsKey(a));
            for (int i = 0; i < 2; i++)
            {
                for (int j = 0; j < 3; j++) System.Console.Write("{0}\t", a[i, j]);
                System.Console.WriteLine();
            }
        }

        static void StdIn_Out()
        {
            string inputs = System.Console.ReadLine();
            string[] input = inputs.Split(new char[] { ' ' });
            foreach (string param in input)
            {
                System.Console.WriteLine("{0}\t", param);
            }
            System.Console.WriteLine("{0}: is {1}", "Richard", "richli");
        }

        static void WeekdayTest()        
        {
            DateTime dt = new DateTime(2012,8,31);
            DateTime dt1 = dt.AddDays(-(((int)dt.DayOfWeek + 1) % 7));
            System.Console.WriteLine(dt1);
            dt = new DateTime(2012, 4, 30);
            dt1 = dt.AddMonths(-2);
            System.Console.WriteLine(dt1);
        }

        static void PathTest()
        {
            System.Console.WriteLine(Path.GetFileName(@"/local/projects/adCenter/SearchAdCenterUnifiedStreams/OLAPMetaData/V2/2012/08/DimFraudType_2012_08_18.tsv"));
        }

        static void DateGapTest()
        {
            //DateTime day1 = DateTime.Parse("20120601");
            //DateTime day2 = DateTime.Parse("20120603");
            DateTime day1 = DateTime.ParseExact("20120601", "yyyyMMdd", CultureInfo.InvariantCulture);
            DateTime day2 = DateTime.ParseExact("20120603", "yyyyMMdd", CultureInfo.InvariantCulture);
            System.Console.WriteLine((day1 - day2).Days);
        }

        static void SyntaxTest()
        {
            string d1, d2;
            d1 = d2 = "20120529";
            System.Console.WriteLine("d1={0}\td2={1}", d1, d2);
        }

        static void EventLogTest()
        {
            if (!EventLog.SourceExists("Guided Analysis"))
            {
                //An event log source should not be created and immediately used.
                //There is a latency time to enable the source, it should be created
                //prior to executing the application that uses the source.
                //Execute this sample a second time to use the new source.
                EventLog.CreateEventSource("Guided Analysis", "Bing CSI");
                Console.WriteLine("CreatedEventSource");
                Console.WriteLine("Exiting, execute the application a second time to use the source.");
                // The source is created.  Exit the application to allow it to be registered.
                return;
            }

            // Create an EventLog instance and assign its source.
            EventLog myLog = new EventLog("Bing CSI");
            
            myLog.Source = "Guided Analysis";

            // Write an informational entry to the event log.    
            myLog.WriteEntry("Writing to event log.");
        }

        static void WeekDayTest()
        {
            System.Console.WriteLine(DayOfWeek.Friday - DayOfWeek.Sunday);
            DateTime date = DateTime.Now;
            for (int i = 0; i > -7; i--)
            {
                DateTime d = date.AddDays(i);
                System.Console.WriteLine(d.ToString("yyyyMMdd") + ":" + d.AddDays(DayOfWeek.Sunday - d.DayOfWeek - 8).ToString("yyyyMMdd"));
            }
        }

        static void TimeZoneTest()
        {
            var timezones = TimeZoneInfo.GetSystemTimeZones();
            System.Console.WriteLine("Id\tStandardName");
            foreach (TimeZoneInfo tz in timezones)
            {
                if (tz.Id.StartsWith("Pacific"))
                {
                    System.Console.WriteLine(string.Format("{0}\t{1}\t{2}", tz.DisplayName, tz.Id, tz.StandardName));
                }
            }
        }

        static string GetMd5Hash(string input)
        {
            using (MD5 md5Hash = MD5.Create())
            {
                // Convert the input string to a byte array and compute the hash.
                byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));

                // Create a new Stringbuilder to collect the bytes
                // and create a string.
                StringBuilder sBuilder = new StringBuilder();

                // Loop through each byte of the hashed data 
                // and format each one as a hexadecimal string.
                for (int i = 0; i < data.Length; i++)
                {
                    sBuilder.Append(data[i].ToString("x2"));
                }

                // Return the hexadecimal string.
                return sBuilder.ToString();
            }
        }

        static void Md5Test()
        {
            string resource = DateTime.UtcNow.ToString("yyyyMMdd");
            System.Console.WriteLine(string.Format("{0}-->{1}", resource, GetMd5Hash(resource)));
        }

        static void HttpPostTest()
        {
            string md5 = GetMd5Hash(DateTime.UtcNow.ToString("yyyyMMdd"));
            //HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create("http://localhost:54612/UploadHandler.ashx");
            HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create("http://union.soso.com/ms/Interface_Upload.php?auth_code="+md5);
            req.Method = "POST";
            req.ContentType = "text/json";
            //string sJson = @"[{""pstDate"":""2012-05-17"",""TotalTraffic"":100000,""NormalTraffic"":80000},{""pstDate"":""2012-05-16"",""TotalTraffic"":100100,""NormalTraffic"":80100},{""pstDate"":""2012-05-15"",""TotalTraffic"":102000,""NormalTraffic"":80200}]";
            string sJson = @"[{""date"":""20120501"",""bing_total_qv"":1000,""bing_valid_qv"":800},{""date"":""20120502"",""bing_total_qv"":1010,""bing_valid_qv"":810},{""date"":""20120503"",""bing_total_qv"":1020,""bing_valid_qv"":820}]";
            string sjson = @"[{""date"":""20120501"",""bing_total_qv"":1000,""bing_valid_qv"":800},{""date"":""20120502"",""bing_total_qv"":1010,""bing_valid_qv"":810},{""date"":""20120503"",""bing_total_qv"":1020,""bing_valid_qv"":820}]";
            UTF8Encoding encoding = new UTF8Encoding();
            byte[] buffer = encoding.GetBytes(sJson);
            using (Stream reqStream = req.GetRequestStream())
            {
                reqStream.Write(buffer, 0, buffer.Count());
            }
            using (WebResponse wr = req.GetResponse())
            {
                StreamReader reader = new StreamReader(wr.GetResponseStream());
                string ret = reader.ReadToEnd();
                System.Console.WriteLine(ret);
            }
        }

        private static void HttpGetTest()
        {
            // ref: http://www.xp-live.com/Content.ashx?Fid=3124
            string md5 = GetMd5Hash(DateTime.UtcNow.ToString("yyyyMMdd"));            
            HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create("http://union.soso.com/ms/Interface_Download.php?from_date=20120201&to_date=20120203&auth_code=" + md5);
            //HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create("http://localhost:54612/DownloadHandler.ashx?from_date=20120501&to_date=20120506");
            req.Method = "GET";
            using (WebResponse wr = req.GetResponse())
            {
                string json = new StreamReader(wr.GetResponseStream()).ReadToEnd();
                JavaScriptSerializer serializer = new JavaScriptSerializer();
                SosoQueryView[] traffics = serializer.Deserialize<SosoQueryView[]>(json);
                System.Console.WriteLine(json);
            }
        }

        //[DataContract]
        struct Traffic
        {
            //[DataMember(Order=0)]
            public string pstDate;
            //[DataMember(Order=1)]
            public int TotalTraffic;
            //[DataMember(Order=2)]
            public int NormalTraffic;
            //[DataMember(Order=3)]
            public decimal Cost;
            //[DataMember(Order=0)]
            public double Ratio;
        }

        struct SosoQueryView
        {
            public string date;
            public int bing_total_qv;
            public int bing_valid_qv;
            public int total_qv; //Soso's total query view count
            public int valid_qv; //Soso's valid query view count
            public int pay_qv; //billing QV
            public float mem_salary; //bing's income
            public float qv_ctr;
            public float qv_epm; //earning per million query?
        }

        class MainMenu
        {
            public string title;
            public List<SubMenu> subMenu;
        }

        class SubMenu
        {
            public string title;
            public string link;
        }

        private static void JsonTest2()
        {
            //string json = @"[{""date"":""2012-02-01"",""bing_total_qv"":200588,""bing_valid_qv"":151777,""total_qv"":16756,""valid_qv"":16624,""pay_qv"":0,""mem_salary"":256,""qv_ctr"":2.49639076035,""qv_epm"":15.4186717998},{""date"":""2012-02-02"",""bing_total_qv"":200588,""bing_valid_qv"":151777,""total_qv"":16756,""valid_qv"":16624,""pay_qv"":0,""mem_salary"":256,""qv_ctr"":2.49639076035,""qv_epm"":15.4186717998}]";
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            //SosoQueryView[] qv = serializer.Deserialize<SosoQueryView[]>(json);

            List<MainMenu> mainMenu = new List<MainMenu> { 
                new MainMenu { 
                    title = "MM1",
                    subMenu = new List<SubMenu> {
                        new SubMenu { title = "SubM11", link = "l11" },
                        new SubMenu { title = "SubM12", link = "l12" }
                    }
                }, 
                new MainMenu { 
                    title = "MM2",
                    subMenu = new List<SubMenu> {
                        new SubMenu { title = "SubM21", link = "l21" },
                        new SubMenu { title = "SubM22", link = "l22" }
                    }
                }, 
                new MainMenu { 
                    title = "Empty Sub Menu",
                    subMenu = new List<SubMenu>()
                }, 
                new MainMenu { 
                    title = "Null Sub Menu",
                    subMenu = null
                }
            };


            string json = serializer.Serialize(mainMenu);
            System.Console.WriteLine(json);
        }

        private static void JsonTest()
        {
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            //DataContractJsonSerializer jsonSerializer = new DataContractJsonSerializer(typeof(Traffic));
            Traffic traffic = new Traffic() { pstDate = new DateTime(2012,5,17).ToString("yyyy-MM-dd"), TotalTraffic = 100000, NormalTraffic = 50000, Cost = 34300.32m, Ratio = 0.358 };
            Traffic[] traffics = new Traffic[]
            {
                new Traffic() {pstDate = new DateTime(2012,5,17).ToString("yyyy-MM-dd"), TotalTraffic = 100000, Cost = 34300.32m, Ratio = 0.358},
                new Traffic() {pstDate = new DateTime(2012,5,16).ToString("yyyy-MM-dd"), TotalTraffic = 100100, NormalTraffic = 50100, Cost = 34400.32m, Ratio = 0.458},
                new Traffic() {pstDate = new DateTime(2012,5,15).ToString("yyyy-MM-dd"), TotalTraffic = 102000, NormalTraffic = 50200, Cost = 35300.32m, Ratio = 0.558},
            };
            string json = serializer.Serialize(traffics);
            System.Console.Out.WriteLine(json);

            Traffic[] traffics2 = serializer.Deserialize<Traffic[]>(json);
            foreach (Traffic traf in traffics2)
            {
                System.Console.Out.WriteLine(string.Format("pstDate: {0}, TotalTraffic: {1}, NoramTraffic: {2}, Cost: {3}, Ratio: {4}", traf.pstDate, traf.TotalTraffic, traf.NormalTraffic, traf.Cost, traf.Ratio));
            }
        }

        enum MyEumn { A, B, C };

        static void NullEnum()
        {
            MyEumn a = MyEumn.B;
            System.Console.WriteLine(a);
            //a = null;
            System.Console.WriteLine(a);
        }

        private readonly static string[] PROP_NAMES = 
        {
            "AppId",
            "ApplicationName",
            "CompanyName",
            "CountryRegion",
            "AppIdDeleted",
            // Add more properties for COGS reporting. Please see Bug 533300.
            "TrafficPriorityOverride",
            "TrafficPriorityOverrideJustification",
            "QpmQuotaEnabled",
            "QpmQuota",
            "TrafficPriorityLastModified",
            "TrafficPriorityLastModifiedBy",
            "ApplicationDescription",
            "TrafficPriority",
            "Website",
            "TrafficPriorityOverrideSubReason",
            "BusinessOwner",
            "Reason",
            "SubReason",
            "Division",
            "FinanceContact",
            "Subscription",
            "Billable",
            "CostCenter",
            "InternalOrder",
            "Created",
            "CreatedBy",
            "ContactEmail",
            "AppIdEnabled"
        };

        static void ExceptionOrIf()
        {
            Dictionary<string, Int64> map = new Dictionary<string, Int64>();
            for (int i = 0; i < PROP_NAMES.Length; i++)
            {
                map.Add(PROP_NAMES[i], i);
            }
            string[] props = {"Created", "BusinessOwner", "ContactEmail", "Reason", "CostCenter"};
            DateTime start, end;
            TimeSpan ts;
            Int64 tmp, total;
            #region If
            total = 0;
            /*
            for (int i = 0; i < PROP_NAMES.Length; i++)
            {
                map[PROP_NAMES[i]] = 0;
            }*/
            start = DateTime.Now;
            for (Int64 i = 0; i < 100000000; i++)
            {
                tmp = i % 5;
                if (map.ContainsKey(props[tmp]))
                {
                    total += map[props[tmp]];
                }
            }
            end = DateTime.Now;
            ts = end - start;
            System.Console.WriteLine("If: " + ts.TotalSeconds);
            /*foreach (string key in map.Keys)
            {
                System.Console.Write(String.Format("{0}:{1}\t", key, map[key]));
            }*/
            System.Console.WriteLine(total);
            #endregion

            #region TryGetValue
            total = 0;
            /*
            for (int i = 0; i < PROP_NAMES.Length; i++)
            {
                map[PROP_NAMES[i]] = 0;
            }*/
            start = DateTime.Now;
            Int64 value;
            for (Int64 i = 0; i < 100000000; i++)
            {
                tmp = i % 5;
                if (map.TryGetValue(props[tmp], out value)) 
                {
                    total += value;
                }
            }
            end = DateTime.Now;
            ts = end - start;
            System.Console.WriteLine("TryGetValue: " + ts.TotalSeconds);
            /*foreach (string key in map.Keys)
            {
                System.Console.Write(String.Format("{0}:{1}\t", key, map[key]));
            }*/
            System.Console.WriteLine(total);
            #endregion

            #region Try-Catch
            total = 0;
            /*for (int i = 0; i < PROP_NAMES.Length; i++)
            {
                map[PROP_NAMES[i]] = 0;
            }
            foreach (string key in map.Keys) 
            {
                map[key] = 0;
            }
             */
            start = DateTime.Now;
            for (Int64 i = 0; i < 100000000; i++)
            {
                tmp = i % 5;
                try 
                {
                    total += map[props[tmp]];
                } 
                catch (KeyNotFoundException) {
                    // silence ignore
                }
            }
            end = DateTime.Now;
            ts = end - start;
            System.Console.WriteLine("Try-Catch: " + ts.TotalSeconds);
            /*foreach (string key in map.Keys)
            {
                System.Console.Write(String.Format("{0}:{1}\t", key, map[key]));
            }*/
            System.Console.WriteLine(total);
            #endregion
        }

        static void atoiTest()
        {
            string[] cases = { "12345678901", "123", "456", "-1024", "+2048", "56.78", "12a", "-98b", "", "   ", " 987 ", " - 123 ", "35 ", " -34" };
            for (int i = 0; i < cases.Length; i++)
            {
                try
                {
                    System.Console.WriteLine(atoi(cases[i]));
                }
                catch (Exception e)
                {
                    System.Console.Error.WriteLine(e.Message);
                }
            }
        }

        static int atoi(string s)
        {
            s = s.Trim();
            if (s.Length < 1) throw new Exception("empty string");
            int sign = 1, start = 0;
            if (s[0] == '-')
            {
                sign = -1;
                start = 1;
            }
            else if (s[0] == '+')
            {
                start = 1;
            }
            int r = 0;
            for (int i = start; i < s.Length; i++)
            {
                int d = s[i] - '0';
                if (d < 0 || d > 9) throw new Exception("invalid string");
                r = checked(10 * r + d);
            }
            return sign * r;
        }

        static void TextReplaceTest()
        {
            string textFile = @"D:\temp\EnviroX.cmd";
            string regx = "ExnetSrv01=.*", rplStr = "ExnetSrv01=richli3";
            short ignoreCase=1;
            string logFormat = String.Concat(
                "Process successfully to file: {0}\t",
                "Regx: {1}\t",
                "RplStr: {2}\t");


            String text = File.ReadAllText(textFile);

                //condition = session.Format(replaceRecord.GetString("Condition"));
                //session.Log(String.Format("{0}\t{1}\t{2}\t{3}", file, regx, rplstr, ignoreCase));
                Regex regex = new Regex(regx, ignoreCase == 1 ? RegexOptions.IgnoreCase : RegexOptions.None);
                text = regex.Replace(text, rplStr, 1);

            File.WriteAllText(textFile, text);
            Console.WriteLine(String.Format(logFormat, textFile, regx, rplStr));
        }

        static void TestRegex()
        {
            string[] lines = {".class /*02000009*/ public auto ansi beforefieldinit 'MyPublicNamespace'.'MyPublicClass`21'<'T1','T2'>",
                              ".class /*0200011C*/ private auto ansi beforefieldinit 'MS.Internal.Bing.DataMining.ExpressionParser'.'AvgAggregation'"};
            foreach (string line in lines) {
                //var m = Regex.Match(line, @"^\.class\s+/\*(?<id>[a-zA-Z0-9]+)\*/(?<attr>[a-zA-Z0-9\s]+)'(?<ns>[^']+)'\.'(?<name>[^']+)'\s*$");
                var m = Regex.Match(line, @"^\.class\s+/\*(?<id>[a-zA-Z0-9]+)\*/(?<attr>[a-zA-Z0-9\s]+)'(?<ns>[^']+)'\.'(?<name>[^'`]+)(`(?<gtid>\d+))?'(\<(?<gt>[^\>]+)\>)?\s*$");
                if (m.Success)
                {
                    Console.WriteLine("id={0}\tns={1}\tname={2}\tgtid={3}\tgt={4}", m.Groups["id"], m.Groups["ns"], m.Groups["name"],m.Groups["gtid"],m.Groups["gt"]);
                }
                else 
                    Console.WriteLine("not match!");
            }
            /*string a = "abcde", b = "a?cde";
            Regex regx = new Regex("a?cd");
            Match m = regx.Match("abcde");
            System.Console.WriteLine("{0}, {1}, {2}", m.Success, m.Index, m.Length);*/
            /*string input = "[abc] + 3 - [xyz] + 4";
            string delimeters = "(\\+|-)";
            string[] results = Regex.Split(input, delimeters);
            foreach (string s in results)
                Console.WriteLine('^'+s+'$');
            string[] inputs = { "images/60811", "search/1234", "730", "images/345", "435", "a03/8a", "abc",""};
            Regex regx1 = new Regex(@"^((((\w+)/)?(\d+)?)|(\w+))$");
            Regex regx2 = new Regex(@"^(((\w+)/(\d+))|(\d+)|(\w+))$");
            foreach (string input in inputs)
            {
                Match m = regx2.Match(input);
                if (m.Success)
                {
                    for (int i = 0; i < m.Groups.Count; i++)
                    {
                        Group g = m.Groups[i];
                        Console.Write("g{0}({1}):{2}\t", i, g.Success, g.Value);
                    }
                    Console.WriteLine("\n");
                }
                else
                {
                    Console.WriteLine("no match");
                }
            }*/
        }

        // to test if we can exexute mutliple SQLs in one SqlCommand
        const string execSql =
@"DELETE FROM Project.AvailableVendorForm;
INSERT INTO Project.AvailableVendorForm
	SELECT DISTINCT FormName, CountryCode FROM Project.VendorForm;
DELETE FROM Project.AvailableVendorForm WHERE CountryCode = 'KOR'";
        const string execSql1 = "select * from Bing where [date] >= @start and market in (@market)";
        static void SqlCommandTest()
        {
            string sqlconnStr = "Data Source=rich2;Initial Catalog=Test;Integrated Security=SSPI;persist security info=False;Trusted_Connection=Yes";
            using (SqlConnection sqlconn = new SqlConnection(sqlconnStr))
            {
                sqlconn.Open();
                SqlCommand cmd = new SqlCommand(execSql1, sqlconn);
                cmd.Parameters.AddWithValue("start", new DateTime(2013, 2, 3));
                cmd.Parameters.AddWithValue("market", new string[] {"zh-CN","en-US"});
                
                Console.Write("Executing SQL... ");
                SqlDataAdapter adaptor = new SqlDataAdapter(cmd);
                DataSet ds = new DataSet();
                adaptor.Fill(ds);
                Console.WriteLine("DONE.");
                sqlconn.Close();
            }
        }

        static void ReplaceXml(string xmlFile, string xpath, string regx, string rplStr)
        {
            XmlDocument xmlDoc = new XmlDocument();
            xmlDoc.Load(xmlFile);
            XmlNodeList nodes = xmlDoc.SelectNodes(xpath);
            foreach (XmlNode node in nodes)
            {
                XmlNode target = node;

                if (String.IsNullOrEmpty(regx))
                {
                    if (target is XmlElement)
                    {
                        target.InnerText = rplStr;
                    }
                    else if (target is XmlAttribute)
                    {
                        target.Value = rplStr;
                    }
                }
                else
                {
                    RegexOptions options = RegexOptions.IgnoreCase;
                    Regex regex = new Regex(regx, options);

                    if (node is XmlElement) // xpath point to a XmlElement
                    {
                        //target = node.FirstChild;
                        target.InnerXml = regex.Replace(target.InnerXml, rplStr, 1);
                    }
                    else
                    {
                        target.Value = regex.Replace(target.Value, rplStr, 1);
                    }
                }
            }
            xmlDoc.Save(xmlFile);
        }

        static void XmlTest()
        {
            ReplaceXml(@"D:\Learning\CSharpTest\AllTest\web.config", "configuration/system.serviceModel/bindings/customBinding/binding[@name='BinaryBinding']", "http[s|S]?Transport", "httpsTransport");
        }

        static void ADSearchTest()
        {
            /*
            DirectoryEntry entry= new DirectoryEntry("LDAP://DC=fareast,DC=corp,DC=microsoft,DC=com");
            using (DirectorySearcher searcher = new DirectorySearcher(entry))
            {
                searcher.Filter = "(&(objectClass=computer)(|(name=richli)(DNSHostName=richli1.fareast.corp.microsoft.com)))";
                searcher.ClientTimeout = TimeSpan.FromMinutes(5);
                searcher.ServerTimeLimit = TimeSpan.FromMinutes(5);
                SearchResult result = searcher.FindOne();
                if (result == null)
                {
                    Console.WriteLine("not found");
                }
                else
                {
                    Console.WriteLine(result.GetDirectoryEntry().Properties["dNSHostName"].Value);
                }
            }*/
            //DirectoryEntry iisWebsite = GetIISWebsiteObject("Haha");
            DirectoryEntry iisDir = new DirectoryEntry("IIS://localhost/W3SVC/2/root");
            Console.WriteLine(iisDir.Properties["Path"].Value);
            Console.WriteLine(iisDir.Path);
            foreach (DirectoryEntry virtualDir in iisDir.Children)
            {
                if (virtualDir.SchemaClassName.ToLower() == "iiswebvirtualdir"
                    && virtualDir.Name.ToLower() == "root")
                {
                    Console.WriteLine(virtualDir.Properties["Path"].Value);
                    break;
                }
            }
            /*
            foreach (string name in iisWebsite.Properties.PropertyNames)
            {
                Console.WriteLine(String.Format("{0}: {1}", name, iisWebsite.Properties[name].Value));
            }*/
        }

        private static DirectoryEntry GetIISWebsiteObject(String webSiteName)
        {
            if (String.IsNullOrEmpty(webSiteName))
            {
                throw new ArgumentNullException("websiteName");
            }

            DirectoryEntry iisWebsite = null;
            Int32 siteCount = 0;

            DirectoryEntry iisRoot = new DirectoryEntry("IIS://localhost/W3SVC");
            foreach (DirectoryEntry webSite in iisRoot.Children)
            {
                if (webSite.SchemaClassName.ToLower() == "iiswebserver"
                    && webSite.Properties["ServerComment"] != null
                    && webSite.Properties["ServerComment"].Value.ToString().ToLower() == webSiteName.ToLower())
                {
                    iisWebsite = webSite;
                    siteCount++;
                }
            }

            if (siteCount != 1)
            {
                iisWebsite = null;
            }

            return iisWebsite;
        }


        static void LocalHostTest()
        {
            string host1 = System.Net.Dns.GetHostName();
            System.Console.WriteLine(host1);
            string host2 = System.Net.Dns.GetHostEntry("richli1").HostName;
            System.Console.WriteLine(host2);
            //string host3 = 
        }

        static double calxn(double x, int n)
        {
            if (n < 0) return 1.0/calxn(x, -n);
            double x2 = x, result = 1, r;
            while (n != 0)
            {
	            r = n%2;
	            n = n/2;
                if (r == 1)
                    result *= x2;
	            x2=x2*x2;
            }
            return result; 
        }

        static void NullableTest1()
        {
            Int32? n = null;
            System.Console.WriteLine(n > 3 ? ">3" : "<=3");
        }

        static void PrivateReflectionTest()
        {
            ConstructorInfo ci = typeof(Hello).GetConstructor(BindingFlags.NonPublic | BindingFlags.Instance, null, System.Type.EmptyTypes, null);
            object helloObject = ci.Invoke(System.Type.EmptyTypes);
            MethodInfo[] helloObjectMethods = helloObject.GetType().GetMethods(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance);

            foreach (MethodInfo mi in helloObjectMethods)
            {
                mi.Invoke(helloObject, System.Type.EmptyTypes);
            }
            Console.ReadLine();
        }

        static void DataTableGetChangesTest()
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("IntCol", typeof(System.Int32));
            dt.Columns.Add("DateTimeCol", typeof(System.DateTime));
            DataRow dr = dt.NewRow();
            dr["IntCol"] = 3;
            dr["DateTimeCol"] = new DateTime(2008, 8, 8);
            dt.Rows.Add(dr);
            dr = dt.NewRow();
            dr[0] = 5;
            dr[1] = new DateTime(2009, 8, 22);
            dt.Rows.Add(dr);
            dr[0] = 6;
            //dt.AcceptChanges();
            DataTable dtModified = dt.GetChanges(DataRowState.Modified);
        }

        static void AssertTest()
        {
            
            List<MyInt> l1 = new List<MyInt>();
            List<MyInt> l2 = new List<MyInt>();
            l1.Equals(l2);
            Assert.AreEqual(l1, l2);
        }

        static void ConfigurationTest()
        {
            System.Console.WriteLine(ConfigurationManager.AppSettings["abc"]);
        }

        static void InheritTest()
        {
            Base b = new Base();
            Base d = new Derived();
            System.Console.WriteLine(b.f());
            System.Console.WriteLine(d.f());
        }

        static void DataTableTest()
        {
            DataTable dt = new DataTable();
            DataColumn dc = new DataColumn("a", typeof(int));
            dc.ReadOnly = true;
            dt.Columns.Add(dc);
            DataRow dr = dt.NewRow();
            dr[0] = 3;
            dt.Rows.Add(dr);
            System.Console.WriteLine(dt.Rows[0][0]);
            try
            {
                dr[0] = 4;
            }
            catch (ReadOnlyException)
            {
            }
            System.Console.WriteLine(dt.Rows[0][0]);
        }

        static void ErrMsgTest()
        {
            System.Console.WriteLine(Boolean.Parse("1"));
            System.Console.WriteLine(DateTime.Parse("2003/08/08"));

            //System.Console.WriteLine(Boolean.Parse("a"));
            //System.Console.WriteLine(DateTime.Parse("2003a"));
        }

        static void ObjectArrayConstructorTest()
        {
            Object[] ary = new Object[3] { 32, "abc", DateTime.Now };
            foreach (Object o in ary)
            {
                System.Console.WriteLine(o);
            }
        }

        static void ChangeTypeTest()
        {
            System.Console.WriteLine(ChangeType("01/01/1900", typeof(DateTime?)));
        }

        public static object ChangeType(object value, Type conversionType)
        {
            if (conversionType.IsGenericType &&
                conversionType.GetGenericTypeDefinition().Equals(typeof(Nullable<>)))
            {

                if (value == null)
                    return null;

                System.ComponentModel.NullableConverter nullableConverter
                    = new System.ComponentModel.NullableConverter(conversionType);

                conversionType = nullableConverter.UnderlyingType;
            }

            return Convert.ChangeType(value, conversionType, CultureInfo.CurrentCulture);
        }

        static void ReflectionTest()
        {
            MyTest mt = new MyTest();
            Type type = mt.GetType();
            Object[] ps = new Object[2];
            ps[0] = 5;
            ps[1] = new DateTime(2008, 8, 8);
            MethodInfo mi = type.GetMethod("f1");
            String ret = (String)type.InvokeMember("f1", BindingFlags.InvokeMethod, null, mt, ps);
            System.Console.WriteLine(ret);
        }

        static void RegExpTest()
        {
            Regex regx = new Regex("ExnetSrv01=.*", RegexOptions.IgnoreCase);
            string s =
@"@REM  @ECHO OFF
@REM *******************************************************************************************
@REM  Enviro.cmd
@REM *******************************************************************************************
@REM
@REM     Status:         Production
@REM     Process:        sets up environment variables 
@REM
@REM     Author:         Jaising
@REM     VSS:            
@REM
@REM *******************************************************************************************
@REM **  Change History:
@REM **
@REM **  Date        Author          Description
@REM **  --------    -------------   -------------------------------------------------------
@REM **  3/13/02     jaising       Initial creation for the extranet
@REM **  9/3/02      krisjohn      Updated the Set analyst to exclude a-davha
@REM ** 10/8/02     krisjohn       REMed out REM hotrptdb=HotlineDatamart
@REM **  01/13/02    lbates        Removed a-stalt from Analyst variable.
@REM **  05/12/03   jeffgl        Removed jeffgl from Analyst variable.
@REM **  09/05/03   jeffgl        Added jeffgl to Analyst variable.
@REM **  12/10/04   krisjohn   Added variable for ScanDoc
@REM ** 7/1/2005    Jbar         Removed Krisjohn
@REM ** 11/11/2005  jhugill      Added ccrilly
@REM ** 11/28/2005  jeffsylv      removed Fred
@REM ** 12/09/2005  jeffsylv      Added Suhailar
@REM ** 3/07/2005   dandom 	  Removed dandom
@REM ** 3/29/2005   jeffsylv	  Removed jeffgl and lindab and added jaynar
@REM ** 4/18/2006  jeffsylv   Added samblake to notifications
@REM ** 10/05/2007  jeffsylv   Updated exnetsrv01 to lcapxsql01
@REM ** 12/19/2007  jbar	removed jbar
@REM ** 01/29/2008  jeffsylv	changed inszoom sqlserver
@REM ** 10/16/2008  jhuber      changed PDFPath from \Package\INSZoom\CorpPdf\ to \Package\CorpPdf\
@REM **
@REM ******************************************************************************************

REM *********************************************
REM Declare Immigration Variables
REM *********************************************
SET ExnetSrv01=migdb-02
SET Immigratdb=Migration_60_20110616

Set INSZoomWebsiteBinInternal=\\miabox-richli\C$\Richard\INSZoomPackage\LCAWEB03_internalINSZoom\inszoom\Bin
Set INSZoomWebsiteBinExternal=\\miabox-richli\C$\Richard\INSZoomPackage\LCAWeb01_ExternalINSZoom\INSZoom\Bin
Set BinPath=\Package\INSZoom\Bin
Set INSZoomWebsitePageInternal=\\miabox-richli\C$\Richard\INSZoomPackage\LCAWeb01_ExternalINSZoom\INSZoom\CorpAttorney
Set INSZoomWebsitePageExternal=\\miabox-richli\C$\Richard\INSZoomPackage\LCAWeb01_ExternalINSZoom\INSZoom\CorpAttorney
Set PagePath=\Package\INSZoom\CorpAttorney

Set INSZoomShare=\\zyh-pc\FormUpgrade\FormsUpgradePackage\V3.12\Forms Upgrade 3.12
Set DBScriptsPath=\Package\
Set PDFPath=\Package\INSZoom\CorpPdf\
Set INSZoomArchive=\\ZYH-PC\FormUpgrade\Archive
Set INSZoomWebsitePDFInternal=\\ZYH-PC\FormUpgrade\InternalPDF
Set INSZoomWebsitePDFExternal=\\ZYH-PC\FormUpgrade\ExternalPDF
Set INSZoomServer=migdb-02
Set INSZoomDb=INSZoom
SET _REAL_YYYYMD=20110616

REM ******************************
REM SETUP ENVIRONMENTAL VARIABLES
REM ******************************
SET analyst=lcaitsup@microsoft.com
SET pageAnalyst=lcahelp@microsoft.com
SET admin=%Analyst%


REM ******************************
REM LCA System Variables 
REM ******************************
    

REM ***********************
REM ContentScanningDoc Variables
REM ***********************
SET SCANDOC_FeedStoreServer=lcaexsql01
SET SCANDOC_FeedStoreDatabase=FeedStoreEx
SET SCANDOC_ScanDocServer=lcaexsql03
SET SCANDOC_ScanDocDataBase=ScanDoc
SET SCANDOC_LOG=SCANDOC_Log.txt

   

REM *********************************************
REM Declare AP Metrics 3.0 Variables
REM *********************************************

SET metsvr=lcaexsql01
SET mettpdb=metrics
SET metrptdb=metricsDatamart
SET metosvr=lcaweb03
SET metolapdb=MetricsOlap

REM *********************************************
REM Declare Hotline 3.0 System Variables
REM *********************************************

SET hotsvr=lcaexsql01
SET hotdb=AntiPiracy
REM hotrptdb=HotlineDatamart
SET hotosvr=lcaweb03
SET hotolap=HotlineOLAP
SET aprptdb=AntiPiracyDataMart
SET aprptdbInterim=AntiPiracyDataMartInterim
SET oltpdbname=AntiPiracy

REM ******************************
REM PubINV Variables (PID 3.1)
REM ******************************
    SET PubExit1=1:30
    SET PubExit2=2:00
    SET AP_BUSINESS_SERVER=

REM ******************************
REM MISCELLANEOUS VARIABLES
REM ******************************

REM    ECHO --- LCA BATCH ENVIRONMENTAL VARIABLES SET ---		>> %log%
 REM   ECHO     -Job:  %_JOB_NAME% 				>> %log%	
 REM   ECHO     -Day:  %_REAL_DAY%, %_REAL_T_MTH% %_REAL_DOM%	>> %log%
 REM   ECHO     -SVR:  \\%_ME%					>> %log%

REM SET ERRORLEVEL=0
ERR 0
@ECHO ON";
            //Regex regx = new Regex("https?://[^/]+/[^/]+/", RegexOptions.IgnoreCase);
            //string s = "http://sssrv/sssite/dir/page.aspx";
            System.Console.WriteLine(regx.Replace(s, "ExnetSrv01=richli3", 1));

            regx = new Regex("^@[a-zA-Z_]+");
            s = "@Last_Day_Of_Last_Month+ 3 @xxx";
            Match match = regx.Match(s);
            if (match.Success)
            {
                System.Console.WriteLine("@xxx:" + match.Value);
            }
            else
            {
                System.Console.WriteLine("@xxx: no match!");
            }

            regx = new Regex(".+", RegexOptions.IgnoreCase);
            s = "true";
            //Regex regx = new Regex("https?://[^/]+/[^/]+/", RegexOptions.IgnoreCase);
            //string s = "http://sssrv/sssite/dir/page.aspx";
            System.Console.WriteLine(regx.Replace(s, "false", 1));

            regx = new Regex("ab*c", RegexOptions.IgnoreCase);
            s = "abbbc123ac35";
            //Regex regx = new Regex("https?://[^/]+/[^/]+/", RegexOptions.IgnoreCase);
            //string s = "http://sssrv/sssite/dir/page.aspx";
            match = regx.Match(s);
            while (match.Success)
            {
                string a = match.Value;
                System.Console.WriteLine(a);
                match = match.NextMatch();
            }
            //System.Console.WriteLine(a);
            System.Console.WriteLine(regx.Replace(s, "ABC", 1));

            regx = new Regex("https?://[^/]+/[^/]+/");
            s = "https://lcaitchn003.fareast.microsoft.com/MyMigrationWeb/Service/MigrationService.svc";
            match = regx.Match(s);
            while (match.Success)
            {
                string a = match.Value;
                System.Console.WriteLine(a);
                match = match.NextMatch();
            }
            //System.Console.WriteLine(a);
            System.Console.WriteLine(regx.Replace(s, "http://richlisetup/MigrationWeb/", 1));

            regx = new Regex("https?://[^/]+/");
            s = "https://lcaitchn003.fareast.microsoft.com:8080/Services/MigrationService.svc";
            match = regx.Match(s);
            while (match.Success)
            {
                string a = match.Value;
                System.Console.WriteLine(a);
                match = match.NextMatch();
            }
            //System.Console.WriteLine(a);
            System.Console.WriteLine(regx.Replace(s, "http://richlisetup/MigrationWeb/", 1));

        }

        struct Column
        {
            public const int ID = 0;
            public const int Name = 1;
            public const int Title = 2;
        }

        static void DSTest()
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("StringCol", typeof(String));
            dt.Columns.Add("IntCol", typeof(int));
            dt.Columns.Add("BoolCol", typeof(bool));
            DataRow row = dt.NewRow();
            row[0] = "Richard";
            row[1] = 20;
            row[2] = true;
            dt.Rows.Add(row);
            row = dt.NewRow();
            row[0] = "Vesta";
            row[1] = 30;
            row[2] = false;
            dt.Rows.Add(row);
            row = dt.NewRow();
            row[0] = "Michael";
            row[1] = 10;
            row[2] = true;
            dt.Rows.Add(row);
            dt.AcceptChanges();
            dt.Rows[0].Delete();
            dt.Rows.Remove(dt.Rows[1]);

        }

        static void EnumTest()
        {
            string[] row = new string[3];
            row[Column.ID] = "2";
            row[Column.Name] = "Richard";
            row[Column.Title] = "SDE2";
            for (int i = 0; i < 3; i++)
            {
                System.Console.WriteLine(row[i]);
            }
        }

        static void NewLineTest()
        {
            System.Console.Write("new line by \\n:\n");
            System.Console.Write("new line by \\r:\r");
            System.Console.Write("new line by \\n\\r:\n\r");
            System.Console.Write("new line by \\r\\n:\r\n");
            System.Console.WriteLine("new line by writeline(println):");
            System.Console.WriteLine("abc\rcd");
        }

        static void NullableTest()
        {
            Object o = DBNull.Value;
            int? i = GetNullableTypedValue<int?>(o);
            //int? a = 3;
            int a = new int();
            Object s = null;
            if (s is Int32)
            {
            }
            //System.Console.WriteLine(a);
            int b = Convert.ToInt32(DBNull.Value);
            //int? c = RowConverter.GetTypedValue<int?>(dr[0]);
            //int? d = dr[0] == DBNull.Value ? null : (int)dr[0];
            //int e = RowConverter.GetTypedValue<int>(dr[0]);
            //int f = (int)dr[0];
            System.Console.WriteLine(b);
        }

        static T GetTypedValue<T>(Object o)
        {
            return (T)o;
        }

        static T GetNullableTypedValue<T>(Object o)
        {
            if (o == DBNull.Value)
                o = null;
            return (T)o;
        }

        static void ThrowTest()
        {
            try
            {
                try
                {
                    throw new Exception("0");
                }
                catch (Exception e)
                {
                    //throw;
                }
            }
            catch (Exception e)
            {
                System.Console.WriteLine(e.Message);
            }
        }

        static void StringCompareTest()
        {
            string s1 = "Richard";
            string s2 = "Rich" + "ard";
            string s3 = " Richard   ".Trim();
            StringBuilder sb = new StringBuilder("Richa");
            sb.Append("rd");
            string s4 = sb.ToString();
            System.Console.WriteLine("s1\t==\tEquals");
            System.Console.WriteLine("s2\t{0}\t{1}", s1 == s2, s1.Equals(s2));
            System.Console.WriteLine("s3\t{0}\t{1}", s1 == s3, s1.Equals(s3));
            System.Console.WriteLine("s4\t{0}\t{1}", s1 == s4, s1.Equals(s4));
        }

        static void DBTest()
        {
            DataTable dt = new DataTable();
            
            DataColumn dc = new DataColumn("bit", typeof(int));
            dt.Columns.Add(dc);
            DataRow dr = dt.NewRow();
            dr[0] = "0";
            dr[0] = "1";
            dr[0] = "";
        }

        static void BitArrayTest()
        {
            BitArray set = new BitArray(3, false);
            //set.se
        }

        static void ListCopyTest()
        {
            List<MyPoint> l1 = new List<MyPoint>(), l2 = new List<MyPoint>();
            l1.Add(new MyPoint(1, 4));
            l1.Add(new MyPoint(2, 10));
            l1.Add(new MyPoint(3, 13));
            l1.Add(new MyPoint(4, 30));
            l1.Add(new MyPoint(5, 342));

            l2.Add(new MyPoint(1, 4));
            l2.AddRange(l1.GetRange(1, 4));
            l2[0].x = 10;
            Console.WriteLine(l1[0].x);
        }

    }

    class MyPoint
    {
        public int x, y;
        public MyPoint(int x, int y)
        {
            this.x = x;
            this.y = y;
        }
    }

    class MyTest
    {
        public String f1(int a, DateTime dt)
        {
            return a.ToString() + dt.ToString();
        }
    }

    public class MyClass
    {
        public int a, b;
        public MyClass(int a, int b)
        {
            this.a = a;
            this.b = b;
        }
    }

}
